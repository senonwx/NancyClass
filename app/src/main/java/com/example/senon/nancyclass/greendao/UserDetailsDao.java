package com.example.senon.nancyclass.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.senon.nancyclass.greendaoentity.UserReview;

import com.example.senon.nancyclass.greendaoentity.UserDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAILS".
*/
public class UserDetailsDao extends AbstractDao<UserDetails, Long> {

    public static final String TABLENAME = "USER_DETAILS";

    /**
     * Properties of entity UserDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Money = new Property(2, int.class, "money", false, "MONEY");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property Flag = new Property(4, int.class, "flag", false, "FLAG");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Comments = new Property(6, String.class, "comments", false, "COMMENTS");
        public final static Property Level = new Property(7, int.class, "level", false, "LEVEL");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
    }

    private DaoSession daoSession;

    private Query<UserDetails> userReview_UserDetailsListQuery;

    public UserDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" TEXT," + // 1: time
                "\"MONEY\" INTEGER NOT NULL ," + // 2: money
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"FLAG\" INTEGER NOT NULL ," + // 4: flag
                "\"CONTENT\" TEXT," + // 5: content
                "\"COMMENTS\" TEXT," + // 6: comments
                "\"LEVEL\" INTEGER NOT NULL ," + // 7: level
                "\"NAME\" TEXT NOT NULL );"); // 8: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getMoney());
        stmt.bindLong(4, entity.getCount());
        stmt.bindLong(5, entity.getFlag());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(7, comments);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindString(9, entity.getName());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getMoney());
        stmt.bindLong(4, entity.getCount());
        stmt.bindLong(5, entity.getFlag());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(7, comments);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindString(9, entity.getName());
    }

    @Override
    protected final void attachEntity(UserDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetails readEntity(Cursor cursor, int offset) {
        UserDetails entity = new UserDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.getInt(offset + 2), // money
            cursor.getInt(offset + 3), // count
            cursor.getInt(offset + 4), // flag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comments
            cursor.getInt(offset + 7), // level
            cursor.getString(offset + 8) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMoney(cursor.getInt(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setFlag(cursor.getInt(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComments(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.getInt(offset + 7));
        entity.setName(cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userDetailsList" to-many relationship of UserReview. */
    public List<UserDetails> _queryUserReview_UserDetailsList(Long id) {
        synchronized (this) {
            if (userReview_UserDetailsListQuery == null) {
                QueryBuilder<UserDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                userReview_UserDetailsListQuery = queryBuilder.build();
            }
        }
        Query<UserDetails> query = userReview_UserDetailsListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserReviewDao().getAllColumns());
            builder.append(" FROM USER_DETAILS T");
            builder.append(" LEFT JOIN USER_REVIEW T0 ON T.\"_id\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UserDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        UserDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserReview userReview = loadCurrentOther(daoSession.getUserReviewDao(), cursor, offset);
        entity.setUserReview(userReview);

        return entity;    
    }

    public UserDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UserDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UserDetails> list = new ArrayList<UserDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UserDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UserDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
