package com.example.senon.nancyclass.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.senon.nancyclass.greendaoentity.UserReview;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_REVIEW".
*/
public class UserReviewDao extends AbstractDao<UserReview, Long> {

    public static final String TABLENAME = "USER_REVIEW";

    /**
     * Properties of entity UserReview.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Total = new Property(2, int.class, "total", false, "TOTAL");
        public final static Property Last = new Property(3, int.class, "last", false, "LAST");
        public final static Property SignTime = new Property(4, String.class, "signTime", false, "SIGN_TIME");
    }

    private DaoSession daoSession;


    public UserReviewDao(DaoConfig config) {
        super(config);
    }
    
    public UserReviewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_REVIEW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TOTAL\" INTEGER NOT NULL ," + // 2: total
                "\"LAST\" INTEGER NOT NULL ," + // 3: last
                "\"SIGN_TIME\" TEXT);"); // 4: signTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_REVIEW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserReview entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getLast());
 
        String signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindString(5, signTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserReview entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getLast());
 
        String signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindString(5, signTime);
        }
    }

    @Override
    protected final void attachEntity(UserReview entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserReview readEntity(Cursor cursor, int offset) {
        UserReview entity = new UserReview( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // total
            cursor.getInt(offset + 3), // last
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // signTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserReview entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setTotal(cursor.getInt(offset + 2));
        entity.setLast(cursor.getInt(offset + 3));
        entity.setSignTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserReview entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserReview entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserReview entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
